{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/strings.ts", "../src/addAddress.ts", "../src/index.ts", "../src/iife.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Jason Go\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\ntype QueryElement<T extends keyof HTMLElementTagNameMap | string> = T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T] : HTMLElement\n\ninterface CustomWindow extends Window {\n  App?: any\n}\n\nexport const win: CustomWindow = window\n\nexport const doc = document\n\nexport const $$ = <QueryString extends string>(s: QueryString): NodeListOf<QueryElement<QueryString>> => {\n  return doc.querySelectorAll(s)\n}\n\nexport const $ = <QueryString extends string>(s: QueryString): QueryElement<QueryString> | null => {\n  return doc.querySelector(s)\n}\n\nexport const domReady = (callback: Function, wait: number = 120000, objects: string[] = [], selectors: string[] = []): void => {\n  const ctrl = setTimeout(() => {\n    checkReady = () => {}\n  }, wait)\n\n  let checkReady = (): void => {\n    if (doc.readyState.length > 7 && objects.every((key) => Object.hasOwn(window, key)) && selectors.every((selector) => $(selector))) {\n      clearInterval(ctrl)\n      callback()\n    } else {\n      setTimeout(checkReady, 9)\n    }\n  }\n\n  checkReady()\n}\n", "/**\n * @license\n * Copyright 2023 Jason Go\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const separator = /\\s*[,|]\\s*/\nexport const enabledOffersKey = 'enabledOffers'\nexport const disabledOffersKey = 'disabledOffers'\nexport const addressStr = '#checkout_offer_extra_contact_information_address_'\nexport const inputCountryId = '#input-address-country'\nexport const lineStr = 'line_'\nexport const valueKey = 'value'\n", "/**\n * @license\n * Copyright 2023 Jason Go\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { $ } from './utils'\nimport { addressStr, lineStr, valueKey, inputCountryId } from './strings'\n\nexport const addAddress = (billingDetails: Record<string, any>): Record<string, any> => {\n  billingDetails.address = {\n    postal_code: ($(addressStr + 'zip') as HTMLInputElement)[valueKey],\n    city: ($(addressStr + 'city') as HTMLInputElement)[valueKey],\n    country: ($(inputCountryId) as HTMLInputElement)[valueKey],\n    line1: ($(addressStr + lineStr + '1') as HTMLInputElement)[valueKey],\n    line2:\n      ($(addressStr + lineStr + '2') as HTMLInputElement)[valueKey] === ''\n        ? ($(addressStr + lineStr + '1') as HTMLInputElement)[valueKey]\n        : ($(addressStr + lineStr + '2') as HTMLInputElement)[valueKey],\n    state: ($(addressStr + 'state') as HTMLSelectElement)?.options[($(addressStr + 'state') as HTMLSelectElement)?.selectedIndex].text\n  }\n  return billingDetails\n}\n", "/**\n * @license\n * Copyright 2023 Jason Go\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n/* eslint-disable no-new-func */\n\nimport { win, doc, domReady } from './utils'\nimport { addAddress } from './addAddress'\nimport { enabledOffersKey, disabledOffersKey, separator, inputCountryId } from './strings'\n\nconst patch = (): void => {\n  const app = win.App\n  const originalConstructor = app.StripeElementsForm\n\n  let serializedConstructor: string = originalConstructor.toString()\n  serializedConstructor = serializedConstructor.replace(/{\\s*(billing_details)\\s*:\\s*(.+?)\\s*}/g, '{$1:App.SABA($2)}')\n\n  const newConstructor = new Function('f', 's', 'o', `(${serializedConstructor})(f,s,o)`)\n\n  // @ts-expect-error\n  newConstructor.bindTo = originalConstructor.bindTo\n  newConstructor.prototype = originalConstructor.prototype\n  app.StripeElementsForm = newConstructor\n  app.SABA = addAddress\n\n  // @ts-expect-error\n  doc.querySelectorAll('[data-stripe-elements-form]').forEach((el) => newConstructor.bindTo(el))\n}\n\nexport const stripeAddBillingAddress = (): void => {\n  const offerSlug = win.location.href.match(/\\/offers\\/(.{8})/)?.[1]\n\n  const config = Object.assign(\n    {\n      [enabledOffersKey]: '',\n      [disabledOffersKey]: ''\n    },\n    doc.currentScript?.dataset\n  )\n\n  if (\n    // Not a checkout page\n    offerSlug === undefined ||\n    // Or included in disabled offers\n    config[disabledOffersKey].split(separator).includes(offerSlug) ||\n    // Or not included in enabled offers\n    (config[enabledOffersKey] !== '' && !config[enabledOffersKey].split(separator).includes(offerSlug))\n  ) {\n    return\n  }\n\n  domReady(\n    // Run the patch\n    patch,\n    // And limit waiting for 10 seconds...\n    10000,\n    // For these objects to exist before running the patch\n    ['$', 'App', 'Stripe'],\n    // And run only when address fields are present\n    [inputCountryId]\n  )\n}\n", "/**\n * @license\n * Copyright 2023 Jason Go\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { stripeAddBillingAddress } from '.'\nstripeAddBillingAddress()\n"],
  "mappings": ";mBAyBO,IAAMA,EAAoB,OAEpBC,EAAM,SAMZ,IAAMC,EAAiCC,GACrCC,EAAI,cAAcD,CAAC,EAGfE,EAAW,CAACC,EAAoBC,EAAe,KAAQC,EAAoB,CAAC,EAAGC,EAAsB,CAAC,IAAY,CAC7H,IAAMC,EAAO,WAAW,IAAM,CAC5BC,EAAa,IAAM,CAAC,CACtB,EAAGJ,CAAI,EAEHI,EAAa,IAAY,CACvBP,EAAI,WAAW,OAAS,GAAKI,EAAQ,MAAOI,GAAQ,OAAO,OAAO,OAAQA,CAAG,CAAC,GAAKH,EAAU,MAAOI,GAAaX,EAAEW,CAAQ,CAAC,GAC9H,cAAcH,CAAI,EAClBJ,EAAS,GAET,WAAWK,EAAY,CAAC,CAE5B,EAEAA,EAAW,CACb,ECjCO,IAAMG,EAAY,aACZC,EAAmB,gBACnBC,EAAoB,iBACpBC,EAAa,qDACbC,EAAiB,yBACjBC,EAAU,QACVC,EAAW,QCHjB,IAAMC,EAAcC,GAA6D,CAtBxF,IAAAC,EAAAC,EAuBE,OAAAF,EAAe,QAAU,CACvB,YAAcG,EAAEC,EAAa,KAAK,EAAuBC,CAAQ,EACjE,KAAOF,EAAEC,EAAa,MAAM,EAAuBC,CAAQ,EAC3D,QAAUF,EAAEG,CAAc,EAAuBD,CAAQ,EACzD,MAAQF,EAAEC,EAAaG,EAAU,GAAG,EAAuBF,CAAQ,EACnE,MACGF,EAAEC,EAAaG,EAAU,GAAG,EAAuBF,CAAQ,IAAM,GAC7DF,EAAEC,EAAaG,EAAU,GAAG,EAAuBF,CAAQ,EAC3DF,EAAEC,EAAaG,EAAU,GAAG,EAAuBF,CAAQ,EAClE,OAAQH,EAAAC,EAAEC,EAAa,OAAO,IAAtB,YAAAF,EAA+C,SAASD,EAAAE,EAAEC,EAAa,OAAO,IAAtB,YAAAH,EAA+C,eAAe,IAChI,EACOD,CACT,ECTA,IAAMQ,EAAQ,IAAY,CACxB,IAAMC,EAAMC,EAAI,IACVC,EAAsBF,EAAI,mBAE5BG,EAAgCD,EAAoB,SAAS,EACjEC,EAAwBA,EAAsB,QAAQ,yCAA0C,mBAAmB,EAEnH,IAAMC,EAAiB,IAAI,SAAS,IAAK,IAAK,IAAK,IAAID,CAAqB,UAAU,EAGtFC,EAAe,OAASF,EAAoB,OAC5CE,EAAe,UAAYF,EAAoB,UAC/CF,EAAI,mBAAqBI,EACzBJ,EAAI,KAAOK,EAGXC,EAAI,iBAAiB,6BAA6B,EAAE,QAASC,GAAOH,EAAe,OAAOG,CAAE,CAAC,CAC/F,EAEaC,EAA0B,IAAY,CA7CnD,IAAAC,EAAAC,EA8CE,IAAMC,GAAYF,EAAAR,EAAI,SAAS,KAAK,MAAM,kBAAkB,IAA1C,YAAAQ,EAA8C,GAE1DG,EAAS,OAAO,OACpB,CACE,CAACC,CAAgB,EAAG,GACpB,CAACC,CAAiB,EAAG,EACvB,GACAJ,EAAAJ,EAAI,gBAAJ,YAAAI,EAAmB,OACrB,EAIEC,IAAc,QAEdC,EAAOE,CAAiB,EAAE,MAAMC,CAAS,EAAE,SAASJ,CAAS,GAE5DC,EAAOC,CAAgB,IAAM,IAAM,CAACD,EAAOC,CAAgB,EAAE,MAAME,CAAS,EAAE,SAASJ,CAAS,GAKnGK,EAEEjB,EAEA,IAEA,CAAC,IAAK,MAAO,QAAQ,EAErB,CAACkB,CAAc,CACjB,CACF,ECzDAC,EAAwB",
  "names": ["win", "doc", "$", "s", "doc", "domReady", "callback", "wait", "objects", "selectors", "ctrl", "checkReady", "key", "selector", "separator", "enabledOffersKey", "disabledOffersKey", "addressStr", "inputCountryId", "lineStr", "valueKey", "addAddress", "billingDetails", "_a", "_b", "$", "addressStr", "valueKey", "inputCountryId", "lineStr", "patch", "app", "win", "originalConstructor", "serializedConstructor", "newConstructor", "addAddress", "doc", "el", "stripeAddBillingAddress", "_a", "_b", "offerSlug", "config", "enabledOffersKey", "disabledOffersKey", "separator", "domReady", "inputCountryId", "stripeAddBillingAddress"]
}
